/** 
 * 
 *  this is a method I came up with to check whether or not two boxes are touching each 
 *  other. the task was originally given to me in an interview.
 *  
 *  the method takes in the xy location of the top left corner and the xy location of 
 *  the bottom right corner, and checks one boxes location against a range of xy values around the 
 *  other box. the boolean value corresponding to whether the box lies within this range is returned.
 *  
 *  a diagram is included showing how the method determines the boxes to be in contact.
 *  
 *  */



public static boolean areTouching(double[][] box1, double[][] box2) {
		
		boolean topLeftInX = (box1[0][0] >= ( box2[0][0] + box1[0][0] - box1[1][0] ) && box1[0][0] <= ( box2[1][0] + box1[1][0] - box1[0][0] ));
		
		boolean topLeftInY = (box1[0][1] >= ( box2[1][1] + box1[1][1] - box1[0][1] ) && box1[0][1] <= ( box2[0][1] + box1[0][1] - box1[1][1] ));
		
		boolean bottomRightInX = (box1[1][0] >= ( box2[0][0] + box1[0][0] - box1[1][0] ) && box1[1][0] <= ( box2[1][0] + box1[1][0] - box1[0][0] ));
		
		boolean bottomRightInY = (box1[1][1] >= ( box2[1][1] + box1[1][1] - box1[0][1] ) && box1[1][1] <= ( box2[0][1] + box1[0][1] - box1[1][1] ));
		
		
		return ( topLeftInX && topLeftInY && bottomRightInX && bottomRightInY );
		
}



public static void main(String[] args) {

    	double[][] oneBox = {{0 , 3},   // top left corner
    			  {3 , 0}};  // bottom right corner
    	
    	double[][] anotherBox = {{3 , 6},  // top left corner
    			      {6 , 3}}; // bottom right corner

    	System.out.println(areTouching(oneBox, anotherBox));

	/** this returned true, as the boxes given above are touching at the top right corner (of oneBox) 
	    and bottom left corner (of anotherBox) */

    }
